// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Subscription fields
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  subscriptionStatus     String?   @default("inactive")

  // Usage tracking
  monthlyGenerations Int @default(0)
  totalGenerations   Int @default(0)
  lastResetDate      DateTime @default(now())

  accounts    Account[]
  sessions    Session[]
  generations Generation[]
  favorites   Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Generation {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'text', 'image', 'code', 'audio', 'video'
  prompt      String
  content     String?
  imageUrl    String?
  metadata    String?  // Store additional data as JSON string for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]

  @@index([userId, createdAt])
  @@index([type])
}

model Favorite {
  id           String @id @default(cuid())
  userId       String
  generationId String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  generation Generation @relation(fields: [generationId], references: [id], onDelete: Cascade)

  @@unique([userId, generationId])
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  type      String   // 'text', 'image', 'code', etc.
  count     Int      @default(1)
  date      DateTime @default(now())
  metadata  String?  // Store additional usage data as JSON string for SQLite

  @@index([userId, date])
  @@index([type, date])
}